from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, CallbackContext
)
import logging
import sqlite3
import re

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

TOKEN = "7453120271:AAF76-4fLO7SK5bV94ETBoSTB-BpxD1ijf0"
CHANNEL_USERNAME = "@moneytgkk"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("referrals.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0,
    referred_by INTEGER
)
""")
conn.commit()

async def check_subscription_status(user_id: int, context: CallbackContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    bot = context.bot
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'owner']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def check_subscription(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!‚úÖ'"""
    query = update.callback_query
    user_id = query.from_user.id

    if await check_subscription_status(user_id, context):
        await query.message.edit_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        await start(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
    else:
        await query.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

async def start(update: Update, context: CallbackContext) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞."""
    user_id = update.effective_user.id
    args = context.args
    referred_by = int(args[0]) if args and args[0].isdigit() else None

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id, referred_by) VALUES (?, ?)", (user_id, referred_by))
        conn.commit()
        if referred_by:
            cursor.execute("UPDATE users SET balance = balance + 10 WHERE user_id = ?", (referred_by,))
            conn.commit()

    if not await check_subscription_status(user_id, context):
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!‚úÖ", callback_data='subscribed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)
        return

    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–ë–∞–ª–∞–Ω—Åüí∞"), KeyboardButton("–í—ã–≤–µ—Å—Ç–∏‚≠ê")]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 0.10 –≥—Ä–Ω –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}",
        reply_markup=keyboard
    )

async def balance(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
    if not await check_subscription_status(user_id, context):
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!‚úÖ", callback_data='subscribed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    balance = (result[0] / 100) if result else 0  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ –≥—Ä–∏–≤–Ω—ã

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
    await update.message.reply_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} –≥—Ä–Ωüí∞\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 0.10 –≥—Ä–Ω –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}"
    )

async def withdraw(update: Update, context: CallbackContext) -> None:
    """–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥."""
    user_id = update.effective_user.id
    if not await check_subscription_status(user_id, context):
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!‚úÖ", callback_data='subscribed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)
        return

    keyboard = [
        [InlineKeyboardButton("1.00 –≥—Ä–Ω", callback_data="withdraw_100")],
        [InlineKeyboardButton("1.33 –≥—Ä–Ω", callback_data="withdraw_133")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=reply_markup)

async def process_withdraw(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º."""
    query = update.callback_query
    user_id = query.from_user.id
    amount = int(query.data.split("_")[1])

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    balance = result[0] if result else 0

    if balance < amount:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥—Ä–Ω‚ùå", show_alert=True)
    else:
        context.user_data["withdraw_amount"] = amount
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à @username –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:")
        return

async def process_username(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π @username –∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—è–≤–∫–µ."""
    user_id = update.effective_user.id
    username = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ @username
    if not re.match(r"^@[a-zA-Z0-9_]{5,}$", username):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username ‚ùå")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram
    try:
        user_info = await context.bot.get_chat(username)
        if not user_info or not hasattr(user_info, 'username'):
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π @username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–∞–ª–æ—á–∫–∞ (–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)
        if not getattr(user_info, "is_verified", False):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π @username (—Å –≥–∞–ª–æ—á–∫–æ–π) ‚ùå")
            return

    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ @username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! ‚ùå")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    amount = context.user_data.get("withdraw_amount", 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    balance = result[0] if result else 0

    if balance < amount:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥—Ä–Ω! ‚ùå")
        return

    # ‚úÖ –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {(amount / 100):.2f} –≥—Ä–Ω")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ {(amount / 100):.2f} –≥—Ä–Ω –ø–æ–¥–∞–Ω–∞!")

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="subscribed"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ë–∞–ª–∞–Ω—Åüí∞"), balance))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–í—ã–≤–µ—Å—Ç–∏‚≠ê"), withdraw))
    application.add_handler(CallbackQueryHandler(process_withdraw, pattern="withdraw_.*"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^@"), process_username))

    application.run_polling()

if __name__ == '__main__':
    main()
